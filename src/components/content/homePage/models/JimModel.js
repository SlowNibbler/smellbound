/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import { useEffect, useState, useRef } from "react"
import { useFrame } from "@react-three/fiber"
import { useGLTF, useTexture, useAnimations, useFBX, OrbitControls } from "@react-three/drei"
import { FBXLoader, MeshBasicMaterial, Texture } from "three";
import { selectNightmareEnabled } from '../../../state/NightmareSlice';
import { Provider, useSelector } from 'react-redux'
import nightmareStore from '../../../state/NightmareStore';


export default function JimModel(props) {
    // Fetch model and a separate texture
    const texture = useTexture(props.texture)
    const { nodes, animations } = useGLTF(props.model)
    // Extract animation actions
    const { ref, actions, names } = useAnimations(animations)
    // Hover and animation-index states
    const [hovered, setHovered] = useState(false)
  
    // Change cursor on hover-state
    useEffect(() => void (document.body.style.cursor = hovered ? "pointer" : "auto"), [hovered])
    return (
        <group ref={ref} {...props} dispose={null}>
          <group rotation={[Math.PI / 2, 0, 0]} scale={0.05}>
            <primitive object={nodes.mixamorigHips} />
            <mesh
              onPointerOver={() => setHovered(true)}
              onPointerOut={() => setHovered(false)}
              geometry={nodes.Jim.geometry}
              skeleton={nodes.Jim.skeleton}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}>
              <meshStandardMaterial map={texture} map-flipY={false} skinning />
            </mesh>
          </group>
    
        </group>
      )
  
    // return (
    //   <group ref={ref} {...props} dispose={null}>
    //     <group rotation={[Math.PI / 2, 0, 0]} scale={0.03}>
    //       <primitive object={nodes.mixamorigHips} />
    //       <skinnedMesh
    //         onPointerOver={() => setHovered(true)}
    //         onPointerOut={() => setHovered(false)}
    //         geometry={nodes.Jim.geometry}
    //         skeleton={nodes.Jim.skeleton}
    //         rotation={[-Math.PI / 2, 0, 0]}
    //         scale={100}>
    //         <meshStandardMaterial map={texture} map-flipY={false} skinning />
    //       </skinnedMesh>
    //     </group>
  
    //   </group>
    // )
  }